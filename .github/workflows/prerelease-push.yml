name: Package and Publish Pre-Release on Push

on:
  push:
    branches: [ main ]  # 替换为您的默认分支名称

jobs:
  cleanup_and_publish:
    runs-on: ubuntu-latest

    steps:
      # 删除带有 'newest-build' 标签的预发布版本及标签
      - name: Delete Release with Tag 'newest-build'
        run: |
          GITHUB_REPOSITORY="${{ github.repository }}"
          OWNER=$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)
          REPO=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)

          # 删除预发布版本
          LATEST_RELEASE_WITH_TAG=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/$OWNER/$REPO/releases/tags/newest-build)
          if [ ! -z "$LATEST_RELEASE_WITH_TAG" ]; then
            RELEASE_ID=$(echo $LATEST_RELEASE_WITH_TAG | jq -r '.id')
            curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/$OWNER/$REPO/releases/$RELEASE_ID
            echo "Deleted the release with tag 'newest-build'"
          fi

          # 删除标签
          TAG_DELETE_URL="https://api.github.com/repos/$OWNER/$REPO/git/refs/tags/newest-build"
          curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $TAG_DELETE_URL
          echo "Deleted the tag 'newest-build'"

  build_and_package_assets:
    needs: cleanup_and_publish
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Create zip files for different assets
    - name: Package and Rename  BedrockEdition ResourcePack
      run: |
        cd 'Server1/ResourcePack(BedrockEdition)'
        zip -r ../../bedrock-edition-newest-build.zip .
        mv ../../bedrock-edition-newest-build.zip ../../bedrock-edition-newest-build.mcpack

    - name: Package JavaEdition ResourcePack as ZIP
      run: |
        cd 'Server1/ResourcePack(JavaEdition)'
        zip -r ../../java-edition-newest-build.zip .

  build-and-publish-all-assets:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Package BedrockEdition ResourcePack as ZIP and rename it to .mcpack
      - name: Package and Rename BedrockEdition ResourcePack
        run: |
          cd 'Server1/ResourcePack(BedrockEdition)'
          zip -r ../../bedrock-edition-newest-build.zip .
          mv ../../bedrock-edition-newest-build.zip ../../bedrock-edition-newest-build.mcpack

      # Create a zip file from JavaEdition folder
      - name: Package JavaEdition ResourcePack as ZIP
        run: |
          cd 'Server1/ResourcePack(JavaEdition)'
          zip -r ../../java-edition-newest-build.zip .

      # Define the release version (这里我们简单地使用 'newest-build'，也可以从项目中的某个文件或构建信息中获取)
      - name: Set Release Version
        id: set_version
        run: echo ::set-output name=VERSION::newest-build

      # Create a GitHub pre-release with the 'newest-build' tag
      - name: Create Pre-Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # This token is automatically available to the action
        with:
          tag_name: newest-build
          release_name: 最新构建
          body: "此预发布版本由Github Action自动构建。"
          draft: false
          prerelease: true

      # Upload all assets to the created GitHub release
      - name: Upload BedrockEdition Asset (as .mcpack)
        id: upload_bedrock_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bedrock-edition-newest-build.mcpack
          asset_name: ResourcePack-BedrockEdition-newest-build.mcpack
          asset_content_type: application/octet-stream

      - name: Upload JavaEdition Asset
        id: upload_java_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./java-edition-newest-build.zip
          asset_name: ResourcePack-JavaEdition-newest-build.zip
          asset_content_type: application/zip

# 这个工作流会在有新的push推送到指定分支时触发，并且每次都用 'newest-build' 标签创建预发布，
# 同时上传来自不同目录的多个（包括已更名的）资产到同一个预发布版本下。